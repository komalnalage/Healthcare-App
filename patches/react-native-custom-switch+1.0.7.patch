diff --git a/node_modules/react-native-custom-switch/src/customSwitch.js b/node_modules/react-native-custom-switch/src/customSwitch.js
index c638fc1..cd68ba2 100644
--- a/node_modules/react-native-custom-switch/src/customSwitch.js
+++ b/node_modules/react-native-custom-switch/src/customSwitch.js
@@ -1,8 +1,7 @@
 import React, { useState, useEffect, useRef } from 'react';
 import { View, StyleSheet, Text, TouchableWithoutFeedback, Animated, LayoutAnimation, Platform, UIManager } from 'react-native';
 
-import hexToRgb from './hexToRgb';
-
+import hexToRgb from './utils'
 if (Platform.OS === 'android') {
   if (UIManager.setLayoutAnimationEnabledExperimental) {
     UIManager.setLayoutAnimationEnabledExperimental(true);
@@ -38,144 +37,144 @@ export default function CustomSwitch({
   const [ toggleRight, setToggleRight ] = useState(startOnLeft === true ? true : false);
 
   const colorAnim = useRef(new Animated.Value(0)).current;
-  const colorAnimInterpolation = onSwitchBackgroundColor && useRef(colorAnim.interpolate({
-    inputRange: [0, 1],
-    outputRange:[
-      switchBackgroundColor ? hexToRgb(switchBackgroundColor) : hexToRgb('#BBD8B3'), 
-      hexToRgb(onSwitchBackgroundColor)
-    ]
-  })).current;
+    const colorAnimInterpolation = onSwitchBackgroundColor && useRef(colorAnim.interpolate({
+        inputRange: [0, 1],
+        outputRange: [
+            switchBackgroundColor ? hexToRgb(switchBackgroundColor) : hexToRgb('#BBD8B3'),
+            hexToRgb(onSwitchBackgroundColor)
+        ]
+    })).current;
 
 
-  const layoutAnim = {
-    Opacity: () => (
-      LayoutAnimation.configureNext(
-        LayoutAnimation.create(
-          animationSpeed ? animationSpeed : defaultValues.animationSpeed, 
-          LayoutAnimation.Types.Spring,
-          LayoutAnimation.Properties.opacity
+    const layoutAnim = {
+        Opacity: () => (
+            LayoutAnimation.configureNext(
+                LayoutAnimation.create(
+                    animationSpeed ? animationSpeed : defaultValues.animationSpeed,
+                    LayoutAnimation.Types.easeOut,
+                    LayoutAnimation.Properties.opacity
+                )
+            )
         )
-      )
-    )
-  }
-
-  const changeToggle = () => {
-    setToggleRight(!toggleRight);
-  }
-
-  const changeColor = () => {
-    if (toggleRight) {
-      Animated.timing(
-        colorAnim, 
-        {
-          toValue: 1,
-          duration: animationSpeed ? animationSpeed : defaultValues.animationSpeed, 
-          useNativeDriver: false,
-      }).start()
-    } else {
-      Animated.timing(
-        colorAnim, 
-        {
-          toValue: 0,
-          duration: animationSpeed ? animationSpeed : defaultValues.animationSpeed, 
-          useNativeDriver: false,
-      }).start()
     }
-  }
 
-  useEffect(() => {
-    if (toggleRight && onSwitch) {
-      onSwitch();
-    } else if (!toggleRight && onSwitchReverse) {
-      onSwitchReverse()
+    const changeToggle = () => {
+        setToggleRight(!toggleRight);
     }
-    if (onSwitchBackgroundColor) {
-      changeColor();
+
+    const changeColor = () => {
+        if (toggleRight) {
+            Animated.timing(
+                colorAnim,
+                {
+                    toValue: 1,
+                    duration: animationSpeed ? animationSpeed : defaultValues.animationSpeed,
+                    useNativeDriver: false,
+                }).start()
+        } else {
+            Animated.timing(
+                colorAnim,
+                {
+                    toValue: 0,
+                    duration: animationSpeed ? animationSpeed : defaultValues.animationSpeed,
+                    useNativeDriver: false,
+                }).start()
+        }
     }
-  },[toggleRight])
 
-  const defaultValues = {
-    button: {
-      size: { 
-        width: 20,
-        height: 20,
-      },
-      padding: 0,
-      color: {
-        backgroundColor: '#FFFFFF'
-      }
-    },
-    switch: {
-      size: {
-        width: 50,
-      },
-      color: {
-        backgroundColor: '#D4EDE1'
-      }
-    },
-    animationSpeed: 150
-  }
+    useEffect(() => {
+        if (toggleRight && onSwitch) {
+            onSwitch();
+        } else if (!toggleRight && onSwitchReverse) {
+            onSwitchReverse()
+        }
+        if (onSwitchBackgroundColor) {
+            changeColor();
+        }
+    }, [toggleRight])
 
-  const buttonStyle = {
-    height: buttonWidth 
-      ? buttonWidth
-      : (!buttonWidth && switchWidth)
-        ? switchWidth/2
-      : defaultValues.button.size.width,
-    width: buttonWidth 
-      ? buttonWidth
-      : !buttonWidth && switchWidth 
-        ? switchWidth/2
-      : defaultValues.button.size.width,
-    backgroundColor: buttonColor ? buttonColor : defaultValues.button.color.backgroundColor,
-    borderWidth: buttonBorderWidth ? buttonBorderWidth : 0,
-    borderColor: buttonBorderColor ? buttonBorderColor : null,
-    borderRadius: buttonWidth 
-      ? buttonWidth/2
-      : (!buttonWidth && switchWidth)
-        ? switchWidth
-      : defaultValues.button.size.width/2,
-  }
+    const defaultValues = {
+        button: {
+            size: {
+                width: 20,
+                height: 20,
+            },
+            padding: 2,
+            color: {
+                backgroundColor: '#FFFFFF'
+            }
+        },
+        switch: {
+            size: {
+                width: 50,
+            },
+            color: {
+                backgroundColor: '#D4EDE1'
+            }
+        },
+        animationSpeed: 150
+    }
 
-  const toggleStyle = {
-    flexDirection: (switchLeftText || switchRightText) ? 'row' : null,
-    justifyContent: switchLeftText
-      ? 'space-between' 
-        : (switchRightText && !switchLeftText)
-        ? toggleRight 
-          ? 'flex-end' 
-            : 'space-between'
-      : null,
-    alignItems: (!switchLeftText && !switchRightText) 
-      ? toggleRight 
-      ? 'flex-end' 
-        : 'flex-start'
-      : 'center',
-    width: buttonWidth && !switchWidth 
-      ? buttonWidth*2
-      : (buttonWidth) >= switchWidth*0.75
-        ? buttonWidth*1.1
-        : switchWidth
-          ? switchWidth
-      : defaultValues.switch.size.width,
-    backgroundColor: onSwitchBackgroundColor 
-      ? colorAnimInterpolation
-      : switchBackgroundColor && !onSwitchBackgroundColor 
-        ? switchBackgroundColor
-      : defaultValues.switch.color.backgroundColor,
-    borderWidth: switchBorderWidth ? switchBorderWidth : 0,
-    borderColor: switchBorderColor ? switchBorderColor : null,
-    padding: buttonPadding ? buttonPadding : defaultValues.button.padding,
-    borderRadius: (buttonWidth && buttonPadding) 
-      ? (buttonWidth + (buttonPadding/2))*2
-      : (buttonWidth && !buttonPadding)
-        ? (buttonWidth + (defaultValues.button.padding/2))*2
-        : (!buttonWidth && buttonPadding)
-          ? (defaultValues.button.size.width + (buttonPadding/2))*2
-          : (switchWidth && !buttonWidth) 
-            ? switchWidth*2
-      : (defaultValues.button.size.width + (defaultValues.button.padding/2))*2,
-  }
+    const buttonStyle = {
+        height: buttonWidth
+            ? buttonWidth
+            : (!buttonWidth && switchWidth)
+                ? switchWidth / 2
+                : defaultValues.button.size.width,
+        width: buttonWidth
+            ? buttonWidth
+            : !buttonWidth && switchWidth
+                ? switchWidth / 2
+                : defaultValues.button.size.width,
+        backgroundColor: buttonColor ? buttonColor : defaultValues.button.color.backgroundColor,
+        borderWidth: buttonBorderWidth ? buttonBorderWidth : 0,
+        borderColor: buttonBorderColor ? buttonBorderColor : null,
+        borderRadius: buttonWidth
+            ? buttonWidth / 2
+            : (!buttonWidth && switchWidth)
+                ? switchWidth
+                : defaultValues.button.size.width / 2,
+    }
+
+    const toggleStyle = {
+        flexDirection: (switchLeftText || switchRightText) ? 'row' : null,
+        justifyContent: switchLeftText
+            ? 'space-between'
+            : (switchRightText && !switchLeftText)
+                ? toggleRight
+                    ? 'flex-end'
+                    : 'space-between'
+                : null,
+        alignItems: (!switchLeftText && !switchRightText)
+            ? toggleRight
+                ? 'flex-end'
+                : 'flex-start'
+            : 'center',
+        width: buttonWidth && !switchWidth
+            ? buttonWidth * 2
+            : (buttonWidth) >= switchWidth * 0.75
+                ? buttonWidth * 1.1
+                : switchWidth
+                    ? switchWidth
+                    : defaultValues.switch.size.width,
+        backgroundColor: onSwitchBackgroundColor
+            ? colorAnimInterpolation
+            : switchBackgroundColor && !onSwitchBackgroundColor
+                ? switchBackgroundColor
+                : defaultValues.switch.color.backgroundColor,
+        borderWidth: switchBorderWidth ? switchBorderWidth : 0,
+        borderColor: switchBorderColor ? switchBorderColor : null,
+        padding: buttonPadding ? buttonPadding : defaultValues.button.padding,
+        borderRadius: (buttonWidth && buttonPadding)
+            ? (buttonWidth + (buttonPadding / 2)) * 2
+            : (buttonWidth && !buttonPadding)
+                ? (buttonWidth + (defaultValues.button.padding / 2)) * 2
+                : (!buttonWidth && buttonPadding)
+                    ? (defaultValues.button.size.width + (buttonPadding / 2)) * 2
+                    : (switchWidth && !buttonWidth)
+                        ? switchWidth * 2
+                        : (defaultValues.button.size.width + (defaultValues.button.padding / 2)) * 2,
+    }
 
   return (
     <TouchableWithoutFeedback onPress={() => {
